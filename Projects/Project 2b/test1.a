############################################################################
# 
# A simple (and incomplete) demonstration of one you might test basic
# I-type and R-type instructions.
#
# When constructing a complete test suite, be sure to
# 
# (1) Test all operations
# (2) Test operations with several different inputs. 
# (3) Choose inputs carefully.  For example, suppose you switched
#     control wires so that addi instructions actually executed as ori
#     instructions.  The line addi "$3, $3, 0", will work correctly in
#     spite of the mistake.
#
#     Tests:
#      addu, addiu, and, andi, bne, jal, jr, nor, or, slt, sltu, slti, sltiu, sub, subu, xor, xori
#
###########################################################################
	.data
val1:	.word 42
val2:	.word 11
val3: 	.word 22
val4:	.word 1
	.text
	.globl main
main: 
jal gameishard		 # go to gameishard, and prepare to return from it
#doesnt work whoda thought
#remove for jal------------------------------------
lw $16, val1
lw $17 val4
addu $16, $16, $17 #$16 = val1 + val4 = 43
addiu $17, $17, -11     #$17 = 1+11=12
and $18, $17, 0xFFFF    #$18 = 12 & 0xFFFF = 12
andi $19, $18, 5	 #$19 = 12(0xc) & 5(0x5) = 4
#remove for jal-------------------------------------
or $20, $16, $17      # $20 = ($16|$17) = 47
bne $18, $19, after  # $18!=$19, branch	to after
addi $18, $16, 1     # unreachable
after:
nor $21, $20, $18    #!($20|$18) = 0xFFFFFFd0 (+ unsigned, - signed)
slt $22, $19, $21    #$22=$19<$21 = 0 because signed
sltu $23, $19, $21   #$23=$19<$21 = 1 because unsigned
slti $24, $21, 0xFFFFFFFF #$24=$21<0xFFFFFFFF = 1 (0xFFFFFFFF is 0...)
sltiu $25, $21, 0xFFFFFFFF #$25=$21<0xFFFFFFFF = 1 (0xFFFFFFFF is more positive)
sub $10, $21, $20   #$10=$21-$20=0xFFFFFFA5
subu $11, $21, $10  #$11=$21-$10 = 43
xor $12, $11, $20   #$12=$11^$20 = 0
xori $13, $21, 0xAAAAAAAA #$13=$13^0xAAAAAAAA = 5555557A



#addi $18, $18, 1     # unreahcable

j end 	   	       # end the program

gameishard:
lw $14, val2
lw $15 val3
#remember, cant modift saved registers from callee
jr $ra	   	       	      #return from jal

end: